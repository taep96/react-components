[{"/home/taep96/projects/taep96/react-components/packages/react-auto-columns/src/columns.tsx":"1","/home/taep96/projects/taep96/react-components/packages/react-auto-columns/tsup.config.ts":"2","/home/taep96/projects/taep96/react-components/packages/react-auto-columns/dist/index.d.ts":"3","/home/taep96/projects/taep96/react-components/packages/react-auto-columns/dist/index.js":"4"},{"size":3191,"mtime":1684672158883,"results":"5","hashOfConfig":"6"},{"size":238,"mtime":1684674010793,"results":"7","hashOfConfig":"6"},{"size":802,"mtime":1684672162700,"results":"8","hashOfConfig":"9"},{"size":3402,"mtime":1684672159175,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1aw9fm9",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"20"},"6xzjyr",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/home/taep96/projects/taep96/react-components/packages/react-auto-columns/src/columns.tsx",[],[],"/home/taep96/projects/taep96/react-components/packages/react-auto-columns/tsup.config.ts",[],[],"/home/taep96/projects/taep96/react-components/packages/react-auto-columns/dist/index.d.ts",["25"],[],"import React from 'react';\n\ninterface ColumnsProps extends React.HTMLAttributes<HTMLElement> {\n    /**\n     * Class name to apply to each column.\n     *\n     * @default \"\"\n     *\n     * @example\n     * className=\"flex w-3/4 gap-4\"\n     * columnClassName=\"flex flex-col gap-4 flex-1\"\n     * columns={3}\n     */\n    columnClassName?: string;\n    /**\n     * A fixed amount of columns or an object mapping breakpoints to column counts.\n     *\n     * @default 3\n     *\n     * @example\n     * // 0:1 is set by default, you can override it.\n     * columns={{ 768: 2, 1024: 3 }}\n     */\n    columns?: number | {\n        [key in number]?: number;\n    };\n}\ndeclare function Columns({ children, columns, columnClassName, ...Props }: ColumnsProps): React.JSX.Element;\n\nexport { ColumnsProps, Columns as default };\n","/home/taep96/projects/taep96/react-components/packages/react-auto-columns/dist/index.js",["26"],[],"\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/columns.tsx\nvar columns_exports = {};\n__export(columns_exports, {\n  default: () => Columns\n});\nmodule.exports = __toCommonJS(columns_exports);\nvar import_react = __toESM(require(\"react\"));\nfunction calculateColumnCount(columns, windowWidth) {\n  if (windowWidth && typeof columns === \"object\") {\n    const breakpoints = Object.keys(columns).map(Number).filter((key) => key <= windowWidth).sort((a, b) => b - a);\n    return typeof breakpoints[0] === \"number\" && columns[breakpoints[0]] || 1;\n  }\n  if (typeof columns === \"number\") {\n    return columns;\n  }\n  return 3;\n}\nfunction getColumnArray(children, columnCount) {\n  const columnArray = Array(columnCount).fill(null).map(() => []);\n  import_react.Children.forEach(children, (child, index) => {\n    const column = columnArray[index % columnCount];\n    if (!(child && column))\n      return;\n    column.push(child);\n  });\n  return columnArray;\n}\nfunction Columns({\n  // * Don't forget to set default values for props\n  children,\n  columns = 3,\n  columnClassName = \"\",\n  ...Props\n}) {\n  const [columnCount, setColumnCount] = (0, import_react.useState)(3);\n  const [columnArray, setColumnArray] = (0, import_react.useState)(\n    () => getColumnArray(children, columnCount)\n  );\n  (0, import_react.useEffect)(() => {\n    function handleResize() {\n      setColumnCount(calculateColumnCount(columns, window.innerWidth));\n    }\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [columns]);\n  (0, import_react.useEffect)(() => {\n    setColumnArray(getColumnArray(children, columnCount));\n  }, [columnCount, children]);\n  return /* @__PURE__ */ import_react.default.createElement(\"div\", { ...Props }, columnArray.map((column, index) => (\n    // Using index as key here is probably okay since it recalculates columnArray on every render\n    /* @__PURE__ */ import_react.default.createElement(\"div\", { className: columnClassName, key: index }, column)\n  )));\n}\n",{"ruleId":"27","severity":2,"message":"28","line":1,"column":1,"nodeType":"29","messageId":"30","endLine":1,"endColumn":27,"fix":"31"},{"ruleId":null,"fatal":true,"severity":2,"message":"32","nodeType":null},"@typescript-eslint/consistent-type-imports","All imports in the declaration are only used as types. Use `import type`.","ImportDeclaration","typeOverValue",{"range":"33","text":"34"},"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/packages/react-auto-columns/dist/index.js` using `parserOptions.project`: \n- <tsconfigRootDir>/tsconfig.json\n- <tsconfigRootDir>/apps/react-auto-columns-demo/tsconfig.json\n- <tsconfigRootDir>/packages/eslint-config/tsconfig.json\n- <tsconfigRootDir>/packages/react-auto-columns/tsconfig.json\n- <tsconfigRootDir>/packages/react-components-demo/tsconfig.json\nHowever, none of those TSConfigs include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change one of those TSConfigs to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file",[6,6]," type"]